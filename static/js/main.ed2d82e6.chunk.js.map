{"version":3,"sources":["logo.svg","redux/ActionCreator.js","redux/ActionType.js","API/API.js","components/MainFrame/Header.js","components/MainFrame/Navigation.js","components/Tool.js","components/Content/SearchAccount.js","components/MainFrame/index.js","components/Login.js","API/APIType.js","components/Register.js","redux/reducer/login.js","redux/reducer/register.js","redux/reducer/userList.js","redux/reducer/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","userLogin","userInfo","loginCode","type","payload","registerUser","registerCode","errCode","checkSessionExist","getAllSession","checkLogined","d","Promise","resolve","reject","Object","keys","loginInfo","length","setLoginInfo","all","newSession","setAllSession","setUserInfo","name","account","password","userList","getUserList","push","id","createDate","Date","setUserList","getUserInfo","undefined","filter","user","od","JSON","parse","window","localStorage","getItem","setItem","stringify","connect","state","login","dispatch","getLoginInfo","userLogout","setTimeout","then","showConfirmWin","history","useState","show","setShow","target","setTarget","ref","useRef","logout","Navbar","bg","variant","fixed","sticky","className","bsPrefix","Brand","href","src","logo","alt","Collapse","Nav","Link","onClick","e","event","class","Overlay","placement","container","current","containerPadding","Popover","Title","as","Content","Navigation","Item","to","Alert","isShow","msg","onWindowShow","Modal","centered","onHide","backdrop","Header","closeButton","Body","Confirm","onConfirm","Footer","Button","key","list","item","indexOf","getfilterUserList","tableList","setTableList","searchInput","useEffect","retList","map","tmp","setDataList","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","searchValue","value","Table","striped","bordered","hover","size","MainFrame","props","checkRedirect","a","isRedirect","recoveryLogin","comfrimFun","setState","confirmMsg","onAfterConfirmClick","selectContentComp","comp","contentComp","listen","local","console","log","match","this","subFrame","params","Tab","Container","fluid","defaultActiveKey","Row","Col","sm","React","Component","o","isRecovry","isLogined","Login","onLoginClick","accountValue","accountRef","passwordValue","passwordRef","cleanData","createRef","Card","Form","Group","controlId","Label","Control","Text","errMsg","prevProps","prevState","snapshot","u","loginToWeb","Register","onRegisterClick","nameRef","password2","passwordConfirmRef","registerClean","onAfterRegClick","isRegSuccess","nextProps","register","registerAccount","initalState","combineReducers","action","createStore","index","App","initSession","store","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed2d82e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {REGISTER_USER , USER_LOGIN , CHECK_LOGIN , CLEAN_DATA,REGISTER_CLEAN ,GET_LOGININFO,RECOVERY_LOGIN,USER_LOGOUT,GET_USER_LIST} from './ActionType'\n\nexport const userLogin  = (userInfo , loginCode)=>{\n    \n    return {\n        type:USER_LOGIN,\n        payload:{\n            userInfo:userInfo,\n            loginCode:loginCode\n        }\n    };\n}\nexport const userLogout = ()=>{\n    return {\n        type:USER_LOGOUT\n    }\n}\nexport const cleanData =()=>{\n    return {\n        type:CLEAN_DATA\n    };\n};\nexport const checkLogin = (isLogined)=>{\n    return {\n        type:CHECK_LOGIN,\n        payload:{\n            isLogined:isLogined\n        }\n    };\n};\nexport const recoveryLogin =(userInfo , isRecovry)=>{\n    return {\n        type:RECOVERY_LOGIN,\n        payload:{\n            userInfo:userInfo,\n            isLogined:isRecovry\n        }\n    }\n}\n\nexport const registerUser = (registerCode , errCode)=>{\n    return {\n        type:REGISTER_USER,\n        payload:{\n            registerCode:registerCode,\n            errCode:errCode\n        }\n    }\n}\n\nexport const registerClean = ()=>{\n    return {\n        type:REGISTER_CLEAN\n    }\n}\n\nexport const getLoginInfo =()=>{\n    return {\n        type:GET_LOGININFO\n    }\n}\n\nexport const getUserList =(userList)=>{\n    return{\n        type:GET_USER_LIST,\n        payload:{\n            userList:userList\n        }\n    }\n}\n\n","export const USER_LOGIN = \"USER_LOGIN\";\nexport const CHECK_LOGIN = \"CHECK_LOGIN\";\n\nexport const REGISTER_USER = \"REGISTER_USER\";\nexport const GET_USER_LIST = \"GET_USER_LIST\";\n\nexport const CLEAN_DATA = \"CLEAN_DATA\";\nexport const REGISTER_CLEAN = \"REGISTER_CLEAN\";\n\nexport const GET_LOGININFO= \"GET_LOGININFO\";\nexport const RECOVERY_LOGIN= \"RECOVERY_LOGIN\";\nexport const USER_LOGOUT = \"USER_LOGOUT\";","import {ACCOUNT_ERR , PWD_ERR ,LOGIN_SUCCESS ,ACCOUNT_NOTFOUND,REGISTER_SUCCESS ,ACCOUNT_EXIST} from './APIType'\n\n\nexport const initSession =()=>{\n    if(checkSessionExist()){\n        return;\n    }\n\n    const session = {\n        userList : [],\n        loginInfo : {}\n    }\n\n    setAllSession(session);\n}\n\nexport const checkSessionExist = ()=>{\n    return getAllSession() !== null;\n}\n\nexport const loginToWeb = (account , password)=>{\n    return new Promise((resolve , reject)=>{\n        const u = getUserInfo(account);\n        let loginCode = LOGIN_SUCCESS;\n    \n        if(u.length === 0){\n            loginCode = ACCOUNT_ERR;\n        }\n        else if(u[0].password !== password){\n            loginCode = PWD_ERR;\n        }\n\n\n        setTimeout(()=>{\n            if(loginCode === LOGIN_SUCCESS){\n                setLoginInfo(u[0]);\n            }\n\n            resolve([u[0] ,loginCode]);\n        },100);\n    })\n\n}\nexport const logoutToWeb = ()=>{\n    return new Promise((resolve , reject)=>{\n        setTimeout(()=>{\n            setLoginInfo({});\n            resolve();\n        },100);\n    });\n}\nexport const checkLogined = ()=>{\n    const d = getAllSession();\n    return new Promise((resolve,reject)=>{\n        const isLogin = Object.keys(d.loginInfo).length !== 0;\n        resolve(isLogin);\n    });\n}\n\nexport const registerAccount = (name ,account , password , password2)=>{\n    return new Promise((resolve , reject)=>{\n        const u = getUserInfo(account);\n \n        let registerCode = \"\"; \n        if(u.length !== 0){\n            registerCode = ACCOUNT_EXIST;\n        }\n\n        setTimeout(()=>{\n            if(registerCode !== ACCOUNT_EXIST){\n                if(password === password2){\n                    setUserInfo(name , account , password);\n                    registerCode = REGISTER_SUCCESS;\n                }\n                else{\n                    registerCode = PWD_ERR;\n                }            \n            }\n\n            resolve([registerCode]);\n        },100)\n    })\n\n}\n\nexport const getLoginInfo = ()=>{\n    const d = getAllSession();\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(d.loginInfo);\n        },100);        \n    }) ;\n}\n\nexport const getfilterUserList = (key)=>{\n    const list = getUserList().filter((item)=>{\n        const {name,account} = item;\n        return name.indexOf(key) !== -1 || account.indexOf(key) !== -1 || key === \"\";\n    })\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(list);\n        })\n    });\n    \n}\nconst setLoginInfo = (userInfo)=>{\n    const all = getAllSession();\n    const newSession = {\n        ...all,\n        loginInfo:userInfo\n    }\n\n    setAllSession(newSession);\n}\n\nconst setUserInfo = (name , account , password)=>{\n    const userList = getUserList() || [];\n    userList.push({\n        id: userList.length,\n        name :name,\n        account:account,\n        password:password,\n        createDate:new Date()\n    });\n    setUserList(userList);\n}\nconst getUserInfo = (account)=>{\n    const userList = getUserList();\n    if(userList === undefined){\n        return [];\n    }\n\n    return userList.filter((user)=>{\n        return user.account === account;\n    });\n};\n\nconst setUserList = (userList)=>{\n    const od = getAllSession();\n    const d ={\n        ...od,\n        userList:userList\n    } ;\n    setAllSession(d);\n}\nconst getUserList = ()=>{\n    const d = getAllSession() ;\n    if(d === null){\n        return undefined;\n    }\n    return d.userList;\n}\n\nconst getAllSession = ()=>{\n    return JSON.parse(window.localStorage.getItem(\"cms\")) ;\n}\n\nconst setAllSession = (d)=>{\n    window.localStorage.setItem(\"cms\" , JSON.stringify(d));\n}\n\n","import React, { useState, useRef } from 'react';\nimport logo from '../../logo.svg';\nimport {Navbar,Nav, Overlay, Popover} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport {getLoginInfo , userLogout} from '../../redux/ActionCreator'\nimport {logoutToWeb} from '../../API/API'\nfunction Header({loginInfo , getLoginInfo ,showConfirmWin , userLogout , history}) {\n    const [show , setShow] = useState(false);\n    const [target , setTarget] = useState(null);\n    const ref = useRef(null);\n\n    const onUserInfoClick = (event)=>{\n      getLoginInfo();\n      setShow(!show);\n      setTarget(event.target);\n    };\n    const confirmLogOut = (e)=>{\n      showConfirmWin(true , \"Do you want to logout?\" ,logout);\n    }\n    const logout = ()=>{\n      userLogout();\n    }\n\n    return (\n        <>\n          <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" sticky=\"top\" className=\"headerBar\" bsPrefix=\"\">\n              <Navbar.Brand href=\"/\" > \n                  <img src={logo} alt=\"logo\" className=\"btnLogo\" />\n                  CMS\n              </Navbar.Brand>\n              <Navbar.Collapse>\n                <Nav className=\"mr-auto\"></Nav>\n                <Nav>\n                  <Nav.Link onClick={(e)=>{onUserInfoClick(e)}}>\n                    <i  class=\"fa fa-binoculars headerIcon\"></i>\n                  </Nav.Link>\n                  <Nav.Link onClick={(e)=>{confirmLogOut(e)}}>\n                    <i class=\"fa fa-power-off headerIcon\"></i>\n                  </Nav.Link>\n                </Nav>\n              </Navbar.Collapse>\n          </Navbar>\n          <Overlay show={show} target={target} placement={\"bottom\"}  container={ref.current} containerPadding={20}>\n            <Popover  >\n                <Popover.Title as=\"h3\">User Information</Popover.Title>\n                <Popover.Content>\n                   <div>account :{loginInfo.account}</div> \n                   <div>name : {loginInfo.name} </div>\n                </Popover.Content>\n            </Popover>\n          </Overlay>\n        </>\n    );\n\n}\nconst mapStateToProps = (state)=>{\n    return {\n      loginInfo :state.login.userInfo\n    }\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n      getLoginInfo:()=>{\n        dispatch(getLoginInfo()); \n      },\n      userLogout:()=>{\n        logoutToWeb().then(()=>{\n          dispatch(userLogout());\n        })\n        \n      }\n  }\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(Header);\n ","import React from 'react';\nimport {Nav} from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nexport default function Navigation() {\n    return (\n            <Nav  variant=\"pills\" className=\"flex-column text-center\">\n              <Nav.Item bsPrefix=\"meunItem\">\n                <Link to=\"/mainframe/searchAccount\">Search Account</Link>                 \n              </Nav.Item>\n\n            </Nav>\n    );\n\n}\n","import React from 'react';\nimport { Toast,Button, Modal } from \"react-bootstrap\";\nimport {useState} from 'react'\nexport function Alert({isShow , msg , onWindowShow}){\n    const showBtnClose = onWindowShow !== undefined;\n    return(\n        <Modal show={isShow} centered onHide={()=>{onWindowShow(false)}} backdrop=\"static\" >\n            <Modal.Header closeButton>\n                Message\n            </Modal.Header>\n            <Modal.Body >\n                {msg}\n            </Modal.Body>         \n        </Modal>\n\n    );\n}\n\nexport function Confirm({isShow, msg , onConfirm ,  onWindowShow}){\n    return(\n        <Modal show={isShow} centered onHide={()=>{onWindowShow(false)}} backdrop=\"static\" >\n            <Modal.Header closeButton>\n                Message\n            </Modal.Header>\n            <Modal.Body >\n                {msg}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-primary\" onClick={()=>{ onConfirm()}}>Confirm</Button>   \n            </Modal.Footer>     \n        </Modal>\n    );\n}","import React, { useState, useRef, useEffect } from 'react';\nimport {Table, InputGroup, FormControl, Button} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport {getUserList} from '../../redux/ActionCreator'\nimport {getfilterUserList} from '../../API/API'\nfunction SearchAccount({userList,getUserList}) {\n    const [tableList , setTableList] = useState(userList);\n    const searchInput = useRef(null);\n    const setDataList = (list)=>{\n        const retList = [];\n        list.map((item)=>{\n            \n            const tmp =<tr key={item.id}>\n                    <td>{item.id}</td>\n                    <td>{item.account}</td>\n                    <td>{item.name}</td>\n                    <td>{item.createDate}</td>\n                </tr>\n            retList.push(tmp);\n\n        });\n\n        return retList;\n    }\n    const onSearchClick =()=>{\n        const searchValue = searchInput.current.value;\n        getUserList(searchValue);\n    }\n    useEffect(()=>{\n        setTableList(setDataList(userList));\n    },[userList]);\n    return (\n        <div className=\"article-content\">\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    ref={searchInput}\n                    placeholder=\"Input keyword of search\"\n                    aria-label=\"Input keyword of search\"\n                    aria-describedby=\"basic-addon2\"\n                    />\n                <InputGroup.Append>\n                    <Button variant=\"outline-secondary\" onClick={onSearchClick}>Search</Button>\n                </InputGroup.Append>\n            </InputGroup>\n            <Table striped bordered hover size=\"sm\">\n            <thead>\n                    <tr>\n                    <th>#</th>\n                    <th>Account</th>\n                    <th>Name</th>\n                    <th>Create Date</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableList}                 \n                </tbody>  \n            </Table>\n        </div>\n    );\n\n}\nconst mapStateToProps = (state)=>{\n    return {\n      userList :state.userList.userList\n    }\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n      getUserList:(key)=>{\n        getfilterUserList(key).then((list)=>{\n          dispatch(getUserList(list));\n        })        \n      }\n  }\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(SearchAccount);\n ","import React from 'react';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Article from './Article';\nimport {checkLogined  ,getLoginInfo} from '../../API/API'\nimport {recoveryLogin} from '../../redux/ActionCreator'\nimport {Container, Row,Col, Tab, Nav, Navbar, Button, Form} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport {Confirm} from '../Tool'\nimport SearchAccount from '../Content/SearchAccount';\nclass MainFrame extends React.Component{\n    constructor(props){\n        super(props);\n        props.history.listen((local)=>{\n            this.checkRedirect()\n            console.log(this.props.match)\n        });\n\n        this.state = {\n            isShow:false,\n            confirmMsg:\"\",\n            comfrimFun :null,\n            contentComp : null,\n            key :\"\"\n        }\n        this.isRedirect = false;\n    }\n    checkRedirect = async ()=>{\n        const isLogin =  await checkLogined();\n        if(!isLogin && !this.isRedirect){ \n            this.props.history.push(\"/login\");\n            this.isRedirect  = true;;\n        }\n        else if(Object.keys(this.props.loginInfo).length === 0){\n            this.props.recoveryLogin()\n        }\n    };\n\n    showConfirmWin = (isShow , msg , comfrimFun)=>{\n        this.setState({\n            isShow:isShow,\n            confirmMsg:msg,\n            comfrimFun: comfrimFun\n        });\n    }\n    onAfterConfirmClick = ()=>{\n        this.state.comfrimFun();\n        this.setState({\n            isShow:false,\n            confirmMsg:\"\",\n            comfrimFun:null\n        });\n    }\n    selectContentComp = (key)=>{\n        key = key === undefined ? \"searchAccount\":key;\n        if(key === this.state.key){\n            return;\n        }\n\n        let comp = null;\n        switch(key){\n            case \"searchAccount\":\n                comp = <SearchAccount/>\n                break;\n        }\n\n        this.setState({\n            contentComp : comp,\n            key:key\n        });\n    }\n    async componentDidMount(){      \n        this.checkRedirect();\n        const {subFrame} = this.props.match.params;\n        console.log(subFrame)\n        this.selectContentComp(subFrame);\n    }\n    render(){\n        return(\n            <>\n                <Header showConfirmWin={this.showConfirmWin} />\n                <Tab.Container fluid defaultActiveKey=\"first\">\n                    <Row className=\"Content\">\n                        <Col sm={2} className=\"bg-light\">\n                            <Navigation/>\n                        </Col>\n                        <Col sm={10} className=\"content-border\">\n                            {this.state.contentComp}\n                        </Col>\n                    </Row>\n                </Tab.Container>\n                <Confirm isShow={this.state.isShow} msg={this.state.confirmMsg} onConfirm={this.onAfterConfirmClick} />\n            </>\n        )\n    }\n\n    componentDidUpdate(){\n        this.checkRedirect();\n        const {subFrame} = this.props.match.params;\n        this.selectContentComp(subFrame);\n    }\n}\n\n\nconst mapStateToProps = (state)=>{\n    return {\n      loginInfo :state.login.userInfo\n    }\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n      recoveryLogin:()=>{\n        getLoginInfo().then((o)=>{\n            const isRecovry = Object.keys(o).length !== 0;\n            dispatch(recoveryLogin(o , isRecovry)); \n        })\n        \n      }\n  }\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(MainFrame);","import React from 'react';\nimport {connect} from 'react-redux'\nimport {Button, Form, Card} from 'react-bootstrap'\nimport {Alert} from './Tool'\n\nimport {LOGIN_SUCCESS , ACCOUNT_ERR, PWD_ERR ,DATA_EMPTY} from '../API/APIType'\nimport {loginToWeb} from '../API/API'\n\nimport {userLogin ,cleanData} from '../redux/ActionCreator'\nimport { Link } from 'react-router-dom';\nclass Login extends React.Component{\n    constructor(props){\n        super(props);\n        this.accountRef = React.createRef();\n        this.passwordRef = React.createRef();\n      //  const h = useHistory();\n        console.log(this) \n    }\n\n    onLoginClick = ()=>{\n        const accountValue = this.accountRef.value;\n        const passwordValue = this.passwordRef.value;\n\n        this.props.userLogin(accountValue , passwordValue);\n       \n    };\n    onWindowShow = (isShow)=>{\n       if(!isShow)\n            this.props.cleanData();\n    }\n\n\n    render(){ \n        \n        return(\n        <div className=\"inputform\">\n            <div className=\"inputBody\">\n                <Card >    \n                    <Card.Header>Login</Card.Header>       \n                    <Card.Body>\n                        <Form>\n                            <Form.Group controlId=\"formBasicAccount\">\n                                <Form.Label>Account</Form.Label>\n                                <Form.Control ref={(ref)=> {this.accountRef = ref} } type=\"text\"  placeholder=\"Enter Account\" />\n                            </Form.Group>          \n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control ref={(ref)=> {this.passwordRef = ref} } type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n                            <Form.Text className=\"text-muted\">\n                                if you haven't account , <Link to=\"/register\">please register</Link>\n                            </Form.Text>\n                            <Button variant=\"primary\" type=\"button\" onClick={this.onLoginClick}>\n                                Login\n                            </Button>\n                        </Form>\n                    </Card.Body>       \n                </Card>\n\n                <Alert isShow={this.props.errMsg !== \"\"} msg={this.props.errMsg} onWindowShow={this.onWindowShow}/>\n            </div>\n        </div>\n        )\n    }\n    componentDidUpdate(prevProps, prevState, snapshot){\n        const {errMsg , isLogined} = this.props;\n    \n        if(errMsg === \"\" && isLogined){\n            this.props.history.push('/mainFrame');\n        }\n    }\n\n}\n\n\nconst mapStateToProps = (state)=>{\n    const {loginCode , isLogined} = state.login ;\n\n    let errMsg = \"\";\n    switch(loginCode){\n        case ACCOUNT_ERR:\n            errMsg = \"Account is fail\"\n            break;\n        case PWD_ERR:\n            errMsg = \"Password is fail\";\n            break;\n        case DATA_EMPTY:\n            errMsg = \"Input is empty\";\n            break;\n    }\n    return {\n        errMsg:errMsg,\n        isLogined:isLogined\n    }\n};\nconst mapDipatchToProps = (dispatch)=>{\n    return {\n        userLogin : (account , password)=>{   \n            if(account === \"\" || password === \"\"){\n                dispatch(userLogin(null , DATA_EMPTY));\n                return;\n            }        \n            loginToWeb(account,password).then((o)=>{\n                const [userInfo ,loginCode] = o;\n                dispatch(userLogin(userInfo ,loginCode));\n            });\n        },\n        cleanData :()=>{\n            dispatch(cleanData());\n        }\n    }\n};\n\nexport default connect(mapStateToProps,mapDipatchToProps)(Login)\n","\nexport const ACCOUNT_ERR = \"ACCOUNT_ERR\";\nexport const PWD_ERR = \"PWD_ERR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const DATA_EMPTY = \"DATA_EMPTY\";\nexport const ACCOUNT_NOTFOUND = \"ACCOUNT_NOTFOUND\";\nexport const ACCOUNT_EXIST = \"ACCOUNT_EXIST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";","import React from 'react';\nimport {Button, Form,Card} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport {ACCOUNT_EXIST, PWD_ERR ,DATA_EMPTY , REGISTER_SUCCESS} from '../API/APIType'\nimport {registerAccount} from '../API/API'\n\nimport {registerUser,registerClean} from '../redux/ActionCreator'\nimport { Link } from 'react-router-dom';\nimport { Confirm, Alert } from './Tool';\n\nclass Register extends React.Component{\n    constructor(props){\n        super(props);\n        this.nameRef = React.createRef();\n        this.accountRef = React.createRef();\n        this.passwordRef = React.createRef();\n        this.passwordConfirmRef = React.createRef();\n\n        this.state = {\n            isRegSuccess : false\n        }\n    }\n    onRegisterClick = ()=>{\n        const name = this.nameRef.value;\n        const account = this.accountRef.value;\n        const password = this.passwordRef.value;\n        const password2 = this.passwordConfirmRef.value;\n\n        this.props.registerUser(name , account , password , password2);\n    }\n    onWindowShow = (isShow)=>{\n        if(!isShow)\n            this.props.registerClean();\n    }\n    onAfterRegClick = ()=>{\n        //this.props.registerClean();\n        console.log(this.props);\n        this.props.history.push(\"/login\");\n\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {errMsg}  = nextProps;\n        prevState.isRegSuccess = errMsg === \"\";\n        return prevState;\n    }\n    render(){\n        return(\n        <div className=\"inputform\">\n            <div className=\"inputBody\">\n                <Card>    \n                    <Card.Header>\n                        <span>Register</span>\n                    </Card.Header>       \n                    <Card.Body>\n                        <Form>\n                            <Form.Group controlId=\"formBasicName\">\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control ref={(ref=>(this.nameRef = ref))} type=\"text\"  placeholder=\"Enter Name\" />\n                            </Form.Group>  \n                            <Form.Group controlId=\"formBasicAcount\">\n                                <Form.Label>Account</Form.Label>\n                                <Form.Control ref={(ref=>(this.accountRef = ref))} type=\"text\"  placeholder=\"Enter Account\" />\n                            </Form.Group>          \n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control  ref={(ref=>(this.passwordRef = ref))} type=\"text\" placeholder=\"Password\" />\n                            </Form.Group>\n                            <Form.Group controlId=\"formBasicPasswordConfirm\">\n                                <Form.Label>Password Confirm</Form.Label>\n                                <Form.Control  ref={(ref=>(this.passwordConfirmRef = ref))} type=\"text\" placeholder=\"Password Confirm\" />\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"button\" onClick={this.onRegisterClick}>\n                                Register\n                            </Button>\n                            {' '}\n                            <Button variant=\"outline-secondary\" type=\"button\">\n                               <Link to=\"/\" >Back</Link> \n                            </Button>\n                        </Form>\n                    </Card.Body>       \n                </Card>\n                {\n                    this.props.isRegSuccess? <Confirm isShow={this.state.isRegSuccess} msg=\"Register Success\" onConfirm={this.onAfterRegClick} />:\n                    <Alert isShow={!this.props.isRegSuccess && this.props.errMsg !== \"\"} msg={this.props.errMsg} onWindowShow={this.onWindowShow}  />\n                }\n            </div>\n\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    const {registerCode} = state.register ;\n\n    let errMsg = \"\";\n    let isRegSuccess = false;\n    switch(registerCode){\n        case ACCOUNT_EXIST:\n            errMsg = \"Account is exist\"\n            break;\n        case PWD_ERR:\n            errMsg = \"Password is fail\";\n            break;\n        case DATA_EMPTY:\n            errMsg = \"Input is empty\";\n            break;\n        case REGISTER_SUCCESS:\n            isRegSuccess = true;\n            break;\n    }\n    return {\n        errMsg:errMsg,\n        isRegSuccess:isRegSuccess\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        registerUser:(name , account , password , password2)=>{\n            if(account === \"\" || password === \"\" || name === \"\"){\n                dispatch(registerUser(DATA_EMPTY));\n                return;\n            }        \n            registerAccount(name ,account,password,password2).then((o)=>{\n                const [registerCode] = o;\n                dispatch(registerUser(registerCode));\n            });\n        },\n        registerClean:()=>{\n            dispatch(registerClean());\n        }\n    }\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(Register);\n","import {USER_LOGIN,CHECK_LOGIN,CLEAN_DATA,GET_LOGININFO ,RECOVERY_LOGIN,USER_LOGOUT} from '../ActionType'\n\nconst initalState = {\n    userInfo:{},\n    isLogined:false,\n    loginCode:\"NONE\"\n};\n\n\nexport default function(state=initalState , action){\n    const {type} = action;\n\n    switch(type){\n        case USER_LOGIN:\n        case RECOVERY_LOGIN:\n            const {userInfo,loginCode} = action.payload;\n            return {\n                ...state,\n                userInfo:userInfo,\n                isLogined: Object.keys(userInfo).length !== 0,\n                loginCode:loginCode\n            }\n            break;\n        case CHECK_LOGIN:\n            const {isLogined} = action.payload;\n            return {\n                ...state,\n                isLogined: isLogined\n            }\n            break;\n        case GET_LOGININFO:\n            return{\n                ...state\n            }\n            break;\n        case CLEAN_DATA:\n            return initalState;\n            break;\n        case USER_LOGOUT:\n            return initalState\n            break;\n        default:\n            return state;\n            break;\n    }\n}","import {REGISTER_USER ,REGISTER_CLEAN} from '../ActionType'\n\nconst initalState = {\n    registerCode:\"NONE\"\n};\n\nexport default (state=initalState , action)=>{\n    const {type} = action;\n\n    switch(type){\n        case REGISTER_USER:\n            const {registerCode} = action.payload;\n            return {\n                ...state,\n                registerCode:registerCode\n            }\n            break;\n        case REGISTER_CLEAN:\n            return initalState;\n            break;\n        default:\n            return state;\n            break;\n    }\n\n}","import {REGISTER_USER , GET_USER_LIST} from '../ActionType';\n\nconst initalState = {\n    userList:[]\n}\n\n\nexport default function(state=initalState , action){\n    const {type} = action;\n\n    switch(type){\n        case GET_USER_LIST:\n            const {userList} = action.payload;\n            return {\n                ...state,\n                userList:userList\n            }\n            break;\n        default:\n            return state;\n            break;\n    }\n}","import {combineReducers} from 'redux'\nimport login from './login'\nimport register from './register'\nimport userList from './userList'\n\nexport default combineReducers({login , register ,userList});\n\n\n","import {createStore} from 'redux'\nimport index from './reducer/index'\n\nexport default createStore(index);","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport MainFrame from './components/MainFrame/index'\nimport Login from './components/Login'\nimport Register from './components/Register'\n\nimport { HashRouter ,Route,useHistory } from 'react-router-dom';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport {initSession} from './API/API'\nimport { createHashHistory } from \"history\"\nfunction App() {\n  initSession();\n\n  return (\n    <Provider store={store}>\n      <HashRouter >\n        <div className=\"App\">\n          <Route exact path={[\"/mainFrame/:subFrame\",\"/mainFrame\",\"/\"]} component={MainFrame} />\n          <Route path=\"/register\" component={Register}/>\n          <Route path=\"/login\" component={Login}/>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}